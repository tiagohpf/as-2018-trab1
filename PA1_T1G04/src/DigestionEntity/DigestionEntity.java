package DigestionEntity;

import CollectEntity.Message;
import java.util.Arrays;
import java.util.Properties;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;

/**
 *
 * @author Jos√© Santos
 * @author Tiago Faria
 */
public class DigestionEntity extends javax.swing.JFrame {

    /**
     * Creates new form DigestionEntity
     */
    public DigestionEntity() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Digestion Entity");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("Messages received:");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel2.setText("Messages received:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private static boolean isHBorStatus(Message message) {
        String[] fields = message.getMessage().split(";");
        if (fields[3].equals("00") || fields[3].equals("02")) {
            return true;
        }
        return false;
    }

    private static void sendMessage(Message message) {
        //Produce messages to topic EnrichedTopic
        String[] fields = message.getMessage().split(";");

        //All Messages must go to Batch and Report entity
        //Properties for BATCH and ALARM entities
        String topicName = "EnrichedTopic1";
        String key = "batchproducer";
        Properties Batchprops = new Properties();
        Batchprops.put("bootstrap.servers", "localhost:9092,localhost:9093,localhost:9094,localhost:9095");
        Batchprops.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        Batchprops.put("value.serializer", "CollectEntity.MessageSerializer");
        Producer<String, Message> Batchproducer = new KafkaProducer<>(Batchprops);
        ProducerRecord<String, Message> record;

        //Properties for Report
        switch (fields[3]) {
            case "00":
                //Send to Batch
                Batchprops.put("acks", "0");
                record = new ProducerRecord<>(topicName, key, message);
                Batchproducer.send(record);

                //Send to Report
                record = new ProducerRecord<>("EnrichedTopic3", key, message);
                Batchproducer.send(record);

                jTextArea1.append("\nSending " + message.getMessage() + "\n");
                break;
            case "01":
                Batchprops.put("acks", "all");

                //Send to Batch
                record = new ProducerRecord<>(topicName, key, message);
                try {
                    RecordMetadata metadata = Batchproducer.send(record).get();
                } catch (Exception e) {
                    System.err.println("Synchronous fail!");
                }

                //Send to Alarm
                record = new ProducerRecord<>("EnrichedTopic2", key, message);
                try {
                    RecordMetadata metadata = Batchproducer.send(record).get();
                } catch (Exception e) {
                    System.err.println("Synchronous fail!");
                }
                
                //Send to Report
                record = new ProducerRecord<>("EnrichedTopic3", key, message);
                try {
                    RecordMetadata metadata = Batchproducer.send(record).get();
                } catch (Exception e) {
                    System.err.println("Synchronous fail!");
                }

                jTextArea1.append("\nSending " + message.getMessage() + "\n");
                break;
            case "02":

                //Send to Batch
                Batchprops.put("acks", "all");
                record = new ProducerRecord<>(topicName, key, message);
                try {
                    RecordMetadata metadata = Batchproducer.send(record).get();
                } catch (Exception e) {
                    System.err.println("Synchronous fail!");
                }

                //Send to Report
                record = new ProducerRecord<>("EnrichedTopic3", key, message);
                try {
                    RecordMetadata metadata = Batchproducer.send(record).get();
                } catch (Exception e) {
                    System.err.println("Synchronous fail!");
                }

                jTextArea1.append("\nSending " + message.getMessage() + "\n");
                break;
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DigestionEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DigestionEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DigestionEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DigestionEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DigestionEntity().setVisible(true);

                String topicConsumerName = "EnrichTopic";
                String groupConsumerName = "EnrichTopicGroup";

                //Properties
                Properties propsConsumer = new Properties();
                propsConsumer.put("bootstrap.servers", "localhost:9092,localhost:9093,localhost:9094,localhost:9095");
                propsConsumer.put("group.id", groupConsumerName);
                propsConsumer.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
                propsConsumer.put("value.deserializer", "CollectEntity.MessageDeserializer");

                KafkaConsumer<String, Message> consumer = new KafkaConsumer<>(propsConsumer);
                RebalanceListener rebalanceListener = new RebalanceListener(consumer);
                consumer.subscribe(Arrays.asList(topicConsumerName), rebalanceListener);

                //Tudo o que aparece dentro da text √°rea √© tratado aqui, inclusive o consumidor para outras coisas.
                Thread thread = new Thread() {
                    public void run() {
                        while (true) {
                            ConsumerRecords<String, Message> records = consumer.poll(100);
                            for (ConsumerRecord<String, Message> record : records) {
                                jTextArea2.append(record.value().getMessage() + "\n");
                                record.value().enrichMessageWithReg();
                                sendMessage(record.value());
                                //commit offsets 
                                if (!isHBorStatus(record.value())) {
                                    rebalanceListener.addOffset(record.topic(), record.partition(), record.offset());
                                }
                            }
                            consumer.commitSync();
                        }
                    }
                };
                thread.start();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTextArea jTextArea1;
    private static javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
