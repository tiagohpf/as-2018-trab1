package DigestionEntity;

import CollectEntity.Message;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.Properties;
import java.util.Random;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;

/**
 *
 * @author José Santos
 * @author Tiago Faria
 */
public class DigestionEntity extends javax.swing.JFrame {

    /**
     * Creates new form DigestionEntity
     */
    public DigestionEntity() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DigestionEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DigestionEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DigestionEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DigestionEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DigestionEntity().setVisible(true);

                String topicConsumerName = "EnrichTopic";
                String groupConsumerName = "EnrichTopicGroup";

                //Properties
                Properties propsConsumer = new Properties();
                propsConsumer.put("bootstrap.servers", "localhost:9092,localhost:9093");
                propsConsumer.put("group.id", groupConsumerName);
                propsConsumer.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
                propsConsumer.put("value.deserializer", "CollectEntity.MessageDeserializer");

                KafkaConsumer<String, Message> consumer = new KafkaConsumer<>(propsConsumer);
                consumer.subscribe(Arrays.asList(topicConsumerName));

                //Tudo o que aparece dentro da text área é tratado aqui, inclusive o consumidor para outras coisas.
                Thread thread = new Thread() {
                    public void run() {
                        while (true) {
                            ConsumerRecords<String, Message> records = consumer.poll(100);
                            for (ConsumerRecord<String, Message> record : records) {
                                String message = record.value().getMessage();
                                jTextArea1.append(message + "\n");
                            }
                        }
                    }
                };
                thread.start();
            }
            
            private String enrichMessage(String message) {
                StringBuilder enrichedMessage = new StringBuilder();
                String []fields = message.split(";");
                // Add car_id and time
                enrichedMessage.append(fields[0]).append(";").append(fields[1]).append(";");
                enrichedMessage.append(generateRegist(fields[0])).append(";");
                for (int i = 2; i < fields.length; i ++) {
                    if (i < fields.length - 1)
                        enrichedMessage.append(fields[i]).append(";");
                    else
                        enrichedMessage.append(fields[i]);
                }
                return enrichedMessage.toString();
            }
            
            private String generateRegist(String car_id) {
                StringBuilder regist = new StringBuilder();
                Random random = new Random();
                // Regist XX-YY
                for (int i = 0; i < 5; i++) {
                    if (i == 2)
                        regist.append("-");
                    else {
                        char letter = (char) (random.nextInt(26) + 'A');
                        regist.append(Character.toString(letter));
                    }
                }
                String new_car_id = new DecimalFormat("00").format(Integer.parseInt(car_id));
                // Regist XX-YY-ZZ
                return regist.append("-").append(new_car_id).toString();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
