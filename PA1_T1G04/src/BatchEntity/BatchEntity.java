/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BatchEntity;

import CollectEntity.Message;
import DigestionEntity.RebalanceListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;

/**
 *
 * @author kanto
 */
public class BatchEntity extends javax.swing.JFrame {

    /**
     * Creates new form BatchEntity
     */
    public BatchEntity() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BatchEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BatchEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BatchEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BatchEntity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BatchEntity().setVisible(true);

                String topicConsumerName = "EnrichedTopic1";
                String groupConsumerName = "EnrichedTopic1Group";

                //Properties
                Properties propsConsumer = new Properties();
                propsConsumer.put("bootstrap.servers", "localhost:9092,localhost:9093,localhost:9094,localhost:9095");
                propsConsumer.put("group.id", groupConsumerName);
                propsConsumer.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
                propsConsumer.put("value.deserializer", "CollectEntity.MessageDeserializer");

                KafkaConsumer<String, Message> consumer = new KafkaConsumer<>(propsConsumer);
                RebalanceListener rebalanceListener = new RebalanceListener(consumer);
                consumer.subscribe(Arrays.asList(topicConsumerName), rebalanceListener);

                //Tudo o que aparece dentro da text área é tratado aqui, inclusive o consumidor para outras coisas.
                Thread thread = new Thread() {
                    public void run() {
                        File file = new File("src/Data/BATCH.txt");

                        // if file doesnt exists, then create it
                        if (!file.exists()) {
                            try {
                                file.createNewFile();
                            } catch (IOException ex) {
                                Logger.getLogger(BatchEntity.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                        // true = append file
                        FileWriter fw = null;
                        try {
                            fw = new FileWriter(file.getAbsoluteFile(), true);
                        } catch (IOException ex) {
                            Logger.getLogger(BatchEntity.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        BufferedWriter bw = new BufferedWriter(fw);
                        while (true) {
                            ConsumerRecords<String, Message> records = consumer.poll(100);
                            for (ConsumerRecord<String, Message> record : records) {
                                jTextArea1.append(record.value().getMessage() + "\n");
                                try {
                                    bw.write(record.value().getMessage()+"\n");
                                    bw.flush();
                                } catch (IOException ex) {
                                    Logger.getLogger(BatchEntity.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                //commit offsets
                                rebalanceListener.addOffset(record.topic(), record.partition(), record.offset());
                            }
                        }
                    }
                };
                thread.start();
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
